#!/bin/bash

#Exit immediately if a command exits with a non-zero status.
#set -e

devtool_img="yingjieb/godev-vscode"
devtool_tag="v3.9"
goproxy="https://goproxy.cn,direct"

usage(){
    cat <<EOF
$(basename $0) starts godev docker image which has a built-in vscode server and toolchain.

Usage: $(basename $0) [OPTIONS] COMMAND
OPTIONS:
    --name      instance_name, if not provided, a default one will be used
                Vscode port number will be generated by hashing the name
                Change the name if port number is already in use
    --ver       golang toolchain version, $devtool_tag by default

COMMANDS:
    #start a instance running vscode, map host /repo/\$USER to docker instance /repo/\$USER
    start|restart [Options]
        Options:
            --config        /absolute/path/to/your/settings.json
            --keybind       /absolute/path/to/your/keybindings.json
            --port          vscode port, will overwrite the port generated by instance_name
            --password      vscode password

    #stop the running instance
    stop

    #login to the bash of the running instance
    #use --name if you want to login non-defualt instance
    login

    #start a one time instance to exec command.
    #map host \$PWD to the docker instance /app
    #add backslash if quotes are needed. eg.
    #./devtool exec go list -f \"{{context.GOARCH}} {{context.Compiler}}\"
    exec <shell command para...>
EOF

    exit 1
}

# generate a port number from name string
calc_port() {
    local name=$1
    local s=$(echo $name | sha1sum -)
    echo $((16#${s:0:4}%4000 + 60000))
}

parse_arg(){
    user=$(whoami)
    instance_name=${user}_devtool_vscode

    vscode_config=""
    vscode_keybind=""
    vscode_password=""

    while test $# != 0; do
        case $1 in
            --name)
                instance_name=$2
                test -z "$instance_name" && usage
                shift 2
                ;;
            --ver)
                devtool_tag=$2
                test -z "$devtool_tag" && usage
                shift 2
                ;;
            *)
                break
        esac
    done

    local port=$(calc_port $instance_name)
    vscode_port=$port

    COMMAND=$1
    test -z "$COMMAND" && usage
    shift

    case $COMMAND in
        start|restart)
            while test $# != 0; do
                arg=$1
                shift
                case $arg in
                    --config)
                        vscode_config=$1
                        shift
                        ;;
                    --keybind)
                        vscode_keybind=$1
                        shift
                        ;;
                    --port)
                        vscode_port=$1
                        shift
                        ;;
                    --password)
                        vscode_password=$1
                        shift
                        ;;
                    *)
                        usage
                esac
            done
            ;;
        stop)
            ;;
        login)
            ;;
        exec)
            shell_command=${*@Q}
            ;;
        *)
            usage
    esac
    #can be used to map inside pprof http port to outside
    reserve_port=$(($vscode_port + 1000))
}

instance_is_running(){
    local id=$1
    docker inspect -f '{{.State.Running}}' $id > /dev/null 2>&1
}

start_vscode(){
    if instance_is_running $instance_name; then
        echo $instance_name is running
        return
    fi
    extra_args=""
    echo Using docker image $devtool_img:$devtool_tag
    echo Starting docker instance $instance_name for $user
    if test -n "$vscode_config"; then
        echo vscode using config: $vscode_config
        extra_args="$extra_args -v $vscode_config:/usr/local/share/code-server/User/settings.json"
    fi
    if test -n "$vscode_keybind"; then
        echo vscode using keybindings: $vscode_keybind
        extra_args="$extra_args -v $vscode_keybind:/usr/local/share/code-server/User/keybindings.json"
    fi

    if test -n "$vscode_password"; then
        extra_args="$extra_args -e PASSWORD=$vscode_password"
    fi

    if test -n "$goproxy"; then
        extra_args="$extra_args -e GOPROXY=$goproxy"
    fi

    mkdir -p /repo/$user/go
    docker  run -d --rm                         \
            --name $instance_name               \
            --user $(id -u):$(id -g)            \
            -v /etc/passwd:/etc/passwd:ro       \
            -v /etc/group:/etc/group:ro         \
            -v /home/$user:/home/$user          \
            -v /repo/$user:/repo/$user          \
            -w /repo/$user                      \
            -p $vscode_port:8080                \
            -p $reserve_port:8000               \
            -e GOPATH=/repo/$user/go:/go        \
            $extra_args $devtool_img:$devtool_tag

    sleep 3
    echo Open your browser and visit http://ip-of-this-server:$vscode_port
    echo -n "instance: $instance_name port: $vscode_port " >> login.info
    grep "password:" ~/.config/code-server/config.yaml >> login.info
    cat login.info
    echo Debug: port $reserve_port reserved to map 8000 to outside
}

stop_vscode(){
    if instance_is_running $instance_name; then
        docker stop $instance_name
    fi
    sed -i -e "/$instance_name /d" login.info
    echo $instance_name stopped
}

login_instance(){
    if ! instance_is_running $instance_name; then
        echo $instance_name not running, start it before login
        return
    fi
    echo login to $instance_name
    docker exec -it $instance_name bash
}

exec_shell_command(){
    docker  run --rm                            \
            --user $(id -u):$(id -g)            \
            -v /etc/passwd:/etc/passwd:ro       \
            -v /etc/group:/etc/group:ro         \
            -v /home/$user:/home/$user          \
            -v $(pwd):/app                      \
            -e GOPATH="/go:/app"                \
            -w /app                             \
            $devtool_img:$devtool_tag           \
            bash -c "eval $shell_command"
}

main(){
    case $COMMAND in
        start)
            docker pull $devtool_img:$devtool_tag
            start_vscode
            ;;
        stop)
            stop_vscode
            ;;
        restart)
            stop_vscode
            sleep 1
            start_vscode
            ;;
        login)
            login_instance
            ;;
        exec)
            docker pull $devtool_img:$devtool_tag
            exec_shell_command
            ;;
        *)
            usage
    esac
}

parse_arg $*
main
